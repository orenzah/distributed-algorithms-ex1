#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{algorithm}
\usepackage{algorithmic}
\usepackage{tikz}
\usepackage{fancyhdr}
\usepackage{svg}
\pagestyle{fancy}
\usepackage{siunitx}
\usepackage{txfonts}
\fancyhf{}
\rhead{\includegraphics[width=1cm]{header.png}}
\lhead{\includegraphics[width=1cm]{lheader.png}}
\cfoot{\thepage}
\date{April 18, 2019}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
theorems-std
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 2cm
\rightmargin 1cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Distributed Algorithms
\begin_inset Newline newline
\end_inset

371-1-0301
\begin_inset Newline newline
\end_inset

Exercise 2
\end_layout

\begin_layout Author
Rotem Frumer & Oren Zaharia
\begin_inset Newline newline
\end_inset

TODO IDs numbers
\end_layout

\begin_layout Center Header
Oren Zaharia
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
center
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width = 120mm]{2yhhcw.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 We are given some network 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

.
 Our goal is to give tags to the vertices of the network such that given
 the tags of the two vertices we can easily determine whether these vertices
 are neighbors in 
\begin_inset Formula $G$
\end_inset

 or not.
 Show how to give tags of size 
\begin_inset Formula $\left\lceil 2\log n\right\rceil $
\end_inset

 bits to the nodes of the given tree 
\begin_inset Formula $T$
\end_inset

, such that we can determine the adjacency of given two tags in 
\begin_inset Formula $O\left(1\right)$
\end_inset

 time.
 The number of rounds should be 
\begin_inset Formula $O\left(\text{depth}\left(T\right)\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
Let an array of 
\begin_inset Formula $2\log n+1$
\end_inset

 bits to keep the parent ID of the node, and the node itself ID.
 That is, each node's ID it is at most 
\begin_inset Formula $\left\lceil \log n\right\rceil $
\end_inset

, therfore each identity hold two properties of that size, that is 
\begin_inset Formula $\left\lceil 2\log n\right\rceil $
\end_inset

.
\end_layout

\begin_layout Standard
For each node, set 
\begin_inset Formula $K$
\end_inset

 to be its number of neighbours.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm} 
\end_layout

\begin_layout Plain Layout


\backslash
caption{Leader election}
\backslash
label{euclid} 
\end_layout

\begin_layout Plain Layout


\backslash
hspace*{
\backslash
algorithmicindent} 
\backslash
textbf{Input} $myID$
\end_layout

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1] 
\end_layout

\begin_layout Plain Layout


\backslash
IF{$K==1$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE Get parent's ID
\end_layout

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
IF{$rightID==myID$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE $myCounter$ $+=$ $1$
\end_layout

\begin_layout Plain Layout


\backslash
ELSE
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE $oddCounter$ $+=$ $1$
\end_layout

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
IF{$oddCounter==0$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE receive $newID$
\end_layout

\begin_layout Plain Layout

	
\backslash
WHILE {$newID==myID$}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE receive $newID$
\end_layout

\begin_layout Plain Layout

		
\backslash
COMMENT{wait to receive the leader ID.}
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDWHILE
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE send $newID$
\end_layout

\begin_layout Plain Layout


\backslash
ELSE
\end_layout

\begin_layout Plain Layout

	
\backslash
IF{$myCounter == 1$}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE send $myID$.
\end_layout

\begin_layout Plain Layout

		
\backslash
COMMENT {I'm the leader}
\end_layout

\begin_layout Plain Layout

	
\backslash
ELSE
\end_layout

\begin_layout Plain Layout

		
\backslash
IF {$myID
\backslash
neq leftID$}
\end_layout

\begin_layout Plain Layout

			
\backslash
STATE send $leftID$.
\end_layout

\begin_layout Plain Layout

			
\backslash
COMMENT {Left is the leader}
\end_layout

\begin_layout Plain Layout

		
\backslash
ELSE
\end_layout

\begin_layout Plain Layout

			
\backslash
STATE send $rightID$.
\end_layout

\begin_layout Plain Layout

			
\backslash
COMMENT {Right is the leader}
\end_layout

\begin_layout Plain Layout

		
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic} 
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithm} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In the class we proved the insolvability of the Coordinate attack problem
 in the presences of link failures for 2 processes.
 Generalize the proof for any 
\begin_inset Formula $n>1$
\end_inset

.
 In other words, show that there does not exist an algorithm that solves
 the Coordinated attack problem for any number 
\begin_inset Formula $n$
\end_inset

 of processes (
\begin_inset Formula $n>1$
\end_inset

)
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
We saw in the class the problem that is called '
\shape italic
Two Generals' Problem
\shape default
'.
\end_layout

\begin_layout Standard
Using inductive reasoning method.
\end_layout

\begin_layout Proof
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Proof
Base: 
\begin_inset Formula $n=2$
\end_inset

 proofed in class.
\end_layout

\begin_layout Proof
Inductive hypothesis: Suppose there is no Agreement algorithm in graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 with 
\begin_inset Formula $\left|V\right|=n-1$
\end_inset

, where generals are modeled as nodes in 
\begin_inset Formula $V$
\end_inset

.
\end_layout

\begin_layout Proof
Inductive step: Proof by contradiction, that there is exist an alogrithm
 for 
\begin_inset Formula $\left|V\right|=n$
\end_inset

.
\end_layout

\begin_layout Proof
Look at a specific process (that is a General), that process failed to receive
 messages, and it is failing to send messages.
\end_layout

\begin_layout Proof
Therefore, if all the other nodes agrees on 
\begin_inset Formula $0$
\end_inset

, the process that failed to send/receive should agree on 
\begin_inset Formula $0$
\end_inset

, or 
\begin_inset Formula $1$
\end_inset

 if the nodes had agreed so, that is concluded by decisive property.
\end_layout

\begin_layout Proof
By the inductive hypothesis 
\begin_inset Formula $n-1$
\end_inset

 other nodes will fail to agree on number, that is, the process could do
 nothing to change or help.
\end_layout

\begin_layout Proof
Therefore, in graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 with 
\begin_inset Formula $\left|V\right|=n$
\end_inset

, it is impossible.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Consider a general, undirected network, with a leader 
\begin_inset Formula $ùë£$
\end_inset

.
 
\begin_inset Formula $ùë£$
\end_inset

 runs BFS in the network.
\end_layout

\begin_layout Standard
Give a pseudocode that each process runs, in order to participate in the
 BFS.
\end_layout

\begin_layout Standard
The algorithm at each node ùë¢ should return 
\begin_inset Formula $dist\left(v,u\right)$
\end_inset

.
 you can assume that each process 
\begin_inset Formula $u$
\end_inset

 has a unique 
\begin_inset Formula $\text{UID}_{u}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
Given root node 
\begin_inset Formula $v$
\end_inset

 that runs BFS in the network.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm} 
\end_layout

\begin_layout Plain Layout


\backslash
caption{$dist
\backslash
left(v,u
\backslash
right)$}
\backslash
label{euclid} 
\end_layout

\begin_layout Plain Layout


\backslash
hspace*{
\backslash
algorithmicindent} 
\backslash
textbf{Input} $myID$
\end_layout

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1] 
\end_layout

\begin_layout Plain Layout


\backslash
STATE $counter 
\backslash
leftarrow 0$
\end_layout

\begin_layout Plain Layout


\backslash
STATE $C 
\backslash
leftarrow 0$
\end_layout

\begin_layout Plain Layout


\backslash
COMMENT {number of children}
\end_layout

\begin_layout Plain Layout


\backslash
WHILE{no message from $v$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE do nothing (wait)
\end_layout

\begin_layout Plain Layout


\backslash
ENDWHILE
\end_layout

\begin_layout Plain Layout


\backslash
STATE $counter 
\backslash
leftarrow counter + 1$
\end_layout

\begin_layout Plain Layout


\backslash
FOR{$
\backslash
forall u
\backslash
in N
\backslash
left(v
\backslash
right)$}
\end_layout

\begin_layout Plain Layout

	
\backslash
IF{no message sent before}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE send BFS message
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE reply to parent
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
WHILE{feedbacks from children}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE  $W 
\backslash
leftarrow 
\backslash
text{feedback}$
\end_layout

\begin_layout Plain Layout

	
\backslash
COMMENT {append}
\end_layout

\begin_layout Plain Layout


\backslash
ENDWHILE
\end_layout

\begin_layout Plain Layout


\backslash
WHILE{$W
\backslash
neq 0$}
\end_layout

\begin_layout Plain Layout

	
\backslash
IF{feedback is positive}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE $W 
\backslash
leftarrow W-1$
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE $C 
\backslash
leftarrow K+1$
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout

	
\backslash
IF{feedback is negative}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE $W 
\backslash
leftarrow W-1$
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
ENDWHILE
\end_layout

\begin_layout Plain Layout


\backslash
WHILE{$C$}
\end_layout

\begin_layout Plain Layout

	
\backslash
IF{receieved finish message}
\end_layout

\begin_layout Plain Layout

		
\backslash
STATE $C 
\backslash
leftarrow C - 1$
\end_layout

\begin_layout Plain Layout

	
\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
ENDWHILE
\end_layout

\begin_layout Plain Layout


\backslash
STATE send to parent the children feedbacks and self feedback.
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic} 
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithm} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Consider the uni-directed ring with n processes, where the size of the
 ring is known to each one of the processes.
 Each process 
\begin_inset Formula $p_{i}$
\end_inset

, 0 ‚â§ ùëñ ‚â§ ùëõ ‚àí 1 has a unique ID 
\begin_inset Formula $u_{i}$
\end_inset

.
 (There are links from 
\begin_inset Formula $p_{i}$
\end_inset

 to 
\begin_inset Formula $p_{i+1}$
\end_inset

 (mod n).
 Also, some 
\begin_inset Formula $k$
\end_inset

 processes pi1,pi2,...,pik (not necessary consecutive in the ring) also form
 uni-directed ring, i.e.
 there is a link from 
\begin_inset Formula $p_{i1}$
\end_inset

 to 
\begin_inset Formula $p_{i2}$
\end_inset

, from 
\begin_inset Formula $p_{i2}$
\end_inset

 to 
\begin_inset Formula $p_{i3}$
\end_inset

 and so on.
 The topology of our network is known to each one of the processes.
 Each one of the 
\begin_inset Formula $k$
\end_inset

 processes 
\begin_inset Formula $p_{i1}$
\end_inset

,
\begin_inset Formula $p_{i2}$
\end_inset

,...,
\begin_inset Formula $p_{ik}$
\end_inset

 needs to compute the maximal ID in the network.
 Our goal is to choose 
\begin_inset Formula $i1,i2,...,ik$
\end_inset

 such that the number of rounds in the worst case needed to perform the
 required computation is minimized.
 Try to minimize the number of rounds as much as you can.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $n$
\end_inset

 processes, choose 
\begin_inset Formula $k$
\end_inset

 processes such that it is minimize the number of the rounds.
\end_layout

\begin_layout Standard
The number of rounds is minimal when it is 
\begin_inset Formula $k-1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

Round 1: Each process
\end_layout

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
IF{Connected to $k$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE send ID to neighbour
\end_layout

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic} 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

Round 2: Each process that received message
\end_layout

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
IF{$
\backslash
notin
\backslash
left
\backslash
{ 
\backslash
text{one of 
\backslash
ensuremath{k} process}
\backslash
right
\backslash
}$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE forward $
\backslash
max
\backslash
left
\backslash
{ 
\backslash
text{ID}_{R_{x}},
\backslash
text{ID}_{my}
\backslash
right
\backslash
}$
\end_layout

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic} 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Round 
\begin_inset Formula $\left\lfloor \frac{n}{k}+1\right\rfloor $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\end_inset

 
\begin_inset Formula $maxval\leftarrow\max\left\{ p\in\left\{ \frac{n}{k}\text{ processes}\right\} \right\} $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\end_inset

 send the 
\begin_inset Formula $\max\left\{ \text{ID}_{R_{x}},\text{ID}_{my}\right\} $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the end, after 
\begin_inset Formula $k-1$
\end_inset

 rounds, the 
\begin_inset Formula $maxval$
\end_inset

 travelled all the processes, that is everyone knows the toplogy.
\end_layout

\begin_layout Standard
The algorithm stops after 
\begin_inset Formula $\left\lfloor \frac{n}{k}+1\right\rfloor +k-2$
\end_inset

 rounds, that is 
\begin_inset Formula $\left\lfloor \frac{n}{k}\right\rfloor +k-1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Node 
\begin_inset Formula $v$
\end_inset

 is called a center of a non-directed tree 
\begin_inset Formula $T$
\end_inset

 if the maximal distance from it to any other node in the tree is the minimum
 between the tree's nodes.
 (Note that the tree does not have a root.)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Prove that there are at most two centers in a tree.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Present a synchronous algorithm that finds the center(s) of the tree.
 Prove its correctness and analyze complexity.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
